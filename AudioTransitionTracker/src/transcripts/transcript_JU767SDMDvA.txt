timestamp 0: Today, we're going to learn insertion, Sort
timestamp 3: Let's dive right in we're giving this array, and we want it sorted in increasing order
timestamp 9: Here's what we're going to do. We'll start at the left and work our way to the right
timestamp 14: Examining each item and comparing it to the items on its left
timestamp 18: Will then insert it in the correct position in the array?
timestamp 22: You'll notice that part of our array will be sorted as we progress we'll mark those items with the green background
timestamp 29: Let's begin, and you'll see what I mean
timestamp 32: We start it - of course there are no items to the left of [-] so we mark it as sorted
timestamp 41: Moving on to [8] we compare it to [2] and leave it where it is our first two items are now Sorted
timestamp 50: Next we have five which we can see is out of place
timestamp 54: We know it needs to be after two so we swap it with eight
timestamp 64: Our first three items are now sorted on
timestamp 68: Two three again, it's out of place
timestamp 72: We swap it [with] eight and five until it's in the correct position
timestamp 82: We're at our fifth item 9 and I'm sure you can see that. It's in the correct spot
timestamp 88: Let's move to 4 and insert it in the correct place in the array
timestamp 104: And that's it. We're done insertion. Sort is one of the most straightforward sorting algorithms for your reference. Here's the pseudocode
timestamp 115: Insertion Sort has the worst case time complexity of big o of n squared where n is the size of the array?
timestamp 122: for example when an array starts in decreasing order you need to swap and compare every single item
timestamp 128: Which leads to big o of N squared?
timestamp 131: Thank you for watching I love it. If you subscribe please post suggestions for future videos below
